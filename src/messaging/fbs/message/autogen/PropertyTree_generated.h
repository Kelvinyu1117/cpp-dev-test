// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROPERTYTREE_PROPERTY_H_
#define FLATBUFFERS_GENERATED_PROPERTYTREE_PROPERTY_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace Property {

struct Prop;
struct PropBuilder;

struct PropTree;
struct PropTreeBuilder;

enum PropType : int8_t {
  PropType_INT = 0,
  PropType_FLOAT = 1,
  PropType_DOUBLE = 2,
  PropType_BOOL = 3,
  PropType_STRING = 4,
  PropType_MIN = PropType_INT,
  PropType_MAX = PropType_STRING
};

inline const PropType (&EnumValuesPropType())[5] {
  static const PropType values[] = {
    PropType_INT,
    PropType_FLOAT,
    PropType_DOUBLE,
    PropType_BOOL,
    PropType_STRING
  };
  return values;
}

inline const char * const *EnumNamesPropType() {
  static const char * const names[6] = {
    "INT",
    "FLOAT",
    "DOUBLE",
    "BOOL",
    "STRING",
    nullptr
  };
  return names;
}

inline const char *EnumNamePropType(PropType e) {
  if (::flatbuffers::IsOutRange(e, PropType_INT, PropType_STRING)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPropType()[index];
}

struct Prop FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_NAME = 6,
    VT_VALUE = 8,
    VT_SUB_PROPERTIES = 10
  };
  Property::PropType type() const {
    return static_cast<Property::PropType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Property::Prop>> *sub_properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Property::Prop>> *>(VT_SUB_PROPERTIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           VerifyOffset(verifier, VT_SUB_PROPERTIES) &&
           verifier.VerifyVector(sub_properties()) &&
           verifier.VerifyVectorOfTables(sub_properties()) &&
           verifier.EndTable();
  }
};

struct PropBuilder {
  typedef Prop Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(Property::PropType type) {
    fbb_.AddElement<int8_t>(Prop::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Prop::VT_NAME, name);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Prop::VT_VALUE, value);
  }
  void add_sub_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Property::Prop>>> sub_properties) {
    fbb_.AddOffset(Prop::VT_SUB_PROPERTIES, sub_properties);
  }
  explicit PropBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Prop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Prop>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Prop> CreateProp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Property::PropType type = Property::PropType_INT,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Property::Prop>>> sub_properties = 0) {
  PropBuilder builder_(_fbb);
  builder_.add_sub_properties(sub_properties);
  builder_.add_value(value);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Prop> CreatePropDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    Property::PropType type = Property::PropType_INT,
    const char *name = nullptr,
    const char *value = nullptr,
    const std::vector<::flatbuffers::Offset<Property::Prop>> *sub_properties = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  auto sub_properties__ = sub_properties ? _fbb.CreateVector<::flatbuffers::Offset<Property::Prop>>(*sub_properties) : 0;
  return Property::CreateProp(
      _fbb,
      type,
      name__,
      value__,
      sub_properties__);
}

struct PropTree FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PropTreeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROPERTIES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Property::Prop>> *properties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Property::Prop>> *>(VT_PROPERTIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfTables(properties()) &&
           verifier.EndTable();
  }
};

struct PropTreeBuilder {
  typedef PropTree Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_properties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Property::Prop>>> properties) {
    fbb_.AddOffset(PropTree::VT_PROPERTIES, properties);
  }
  explicit PropTreeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PropTree> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PropTree>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PropTree> CreatePropTree(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Property::Prop>>> properties = 0) {
  PropTreeBuilder builder_(_fbb);
  builder_.add_properties(properties);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PropTree> CreatePropTreeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Property::Prop>> *properties = nullptr) {
  auto properties__ = properties ? _fbb.CreateVector<::flatbuffers::Offset<Property::Prop>>(*properties) : 0;
  return Property::CreatePropTree(
      _fbb,
      properties__);
}

inline const Property::PropTree *GetPropTree(const void *buf) {
  return ::flatbuffers::GetRoot<Property::PropTree>(buf);
}

inline const Property::PropTree *GetSizePrefixedPropTree(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Property::PropTree>(buf);
}

inline bool VerifyPropTreeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Property::PropTree>(nullptr);
}

inline bool VerifySizePrefixedPropTreeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Property::PropTree>(nullptr);
}

inline const char *PropTreeExtension() {
  return "bfbs";
}

inline void FinishPropTreeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Property::PropTree> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPropTreeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Property::PropTree> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Property

#endif  // FLATBUFFERS_GENERATED_PROPERTYTREE_PROPERTY_H_
